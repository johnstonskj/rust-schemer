/*!
One-line description.

More detailed description, with

# Example

*/

use std::fmt::Display;
use std::str::FromStr;

// ------------------------------------------------------------------------------------------------
// Public Types
// ------------------------------------------------------------------------------------------------

pub trait SchemeValue: Display + FromStr {
    fn type_name(&self) -> &'static str;
}

// ------------------------------------------------------------------------------------------------
// Private Macros
// ------------------------------------------------------------------------------------------------

macro_rules! scheme_value {
    ($type_name:ty, $const_name:ident, $value:expr) => {
        pub const $const_name: &str = $value;

        impl SchemeValue for $type_name {
            fn type_name(&self) -> &'static str
            where
                Self: Sized,
            {
                $const_name
            }
        }
    };
}

// ------------------------------------------------------------------------------------------------
// Public Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Implementations
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Private Functions
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// Modules
// ------------------------------------------------------------------------------------------------

pub mod booleans;

pub mod chars;

pub mod numbers;

pub mod strings;

pub mod symbols;
